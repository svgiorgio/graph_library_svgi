#include <bits/stdc++.h>
using namespace std;
void FAST() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
}
int n, m;
void DFS(vector<vector<int>> &graph, int k, vector<int>& visited) {
	visited[k] = 1;
	for (auto &t : graph[k]) {
		if (!visited[t]) DFS(graph, t, visited);
	}
}
void BFS(vector<vector<int>> &graph, int k, vector<int>& visited) {
	visited[k] = 1;
	queue<int> q;
	q.push(k);
	while (!q.empty())
	{
		int current = q.front();
		q.pop();
		for (auto &t : graph[current])
			if (!visited[t])
			{
				visited[t] = visited[current] + 1;
				q.push(t);
			}
	}
}
#define INF 1e9+7
void BellmanFord() {
	int n, x;
	vector<tuple<int,int,int>> edges;
	vector<int> distance(n, INF);
	distance[x] = 0;
	for (int i = 0; i < n - 1; ++i) {
		for (auto e : edges) {
			int a, b, w;
			tie(a, b, w) = e;
			distance[b] = min(distance[b], distance[a] + w);
		}
	}
}
void Dijkstra() {
	vector<vector<pair<int, int>>> adj;//граф заполняется в main() пользователем
	int n, x;
	vector<int> distance(n, INF);
	vector<bool> processed(n);
	distance[x] = 0;
	priority_queue<pair<int, int>> q;
	q.push({ 0, x });
	while (!q.empty()) {
		int a = q.top().second; q.pop();
		if (processed[a]) continue;
		processed[a] = true;
		for (auto &u : adj[a]) {
			int b = u.first, w = u.second;
			if (distance[a] + w < distance[b]) {
				distance[b] = distance[a] + w;
				q.push({-distance[b], b});
			}
		}
	}
}
void AdjacencyMatrix() {
	int n, m;
	vector<vector<int>> adj_mat(n, vector<int>(n,0));
	bool is_orient;
	if (is_orient) {
		for (int i = 0; i < m; ++i) {
			int a, b;
			adj_mat[a - 1][b - 1] = 1;
		}
	}
	else {
		for (int i = 0; i < m; ++i) {
			int a, b;
			adj_mat[a - 1][b - 1] = 1;
			adj_mat[b - 1][a - 1] = 1;
		}
	}
}
void AdjacencyLists() {
	vector<vector<int>> adj_l(n);
	bool is_orient;
	if (is_orient) {
		for (int i = 0; i < m; ++i) {
			int a, b;
			adj_l[a - 1].push_back(b - 1);
		}
	}
	else {
		for (int i = 0; i < m; ++i) {
			int a, b;
			adj_l[a - 1].push_back(b - 1);
			adj_l[b - 1].push_back(a - 1);
		}
	}
}
signed main() {
	FAST();	
	return 0;
}
